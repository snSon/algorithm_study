#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <string.h>

int compare(const void *a, const void *b){
    int num1 = *(int*)a;
    int num2 = *(int*)b;
    
    if(num1 > num2){
        return 1;
    }
    else{
        return -1;
    }
}

int search_food(const char* maps[], int** visited, size_t maps_len, int x, int y){
    visited[x][y] = 1;
    
    int foods = maps[x][y] - '0';
    
    if(x >= 1){
        if(!visited[x -1][y]){
            foods += search_food(maps, visited, maps_len, x - 1, y);
        }
    }
    
    if(x < maps_len - 1){
        if(!visited[x + 1][y]){
            foods += search_food(maps, visited, maps_len, x + 1, y);
        }
    }
    
    if(y >= 1){
        if(!visited[x][y - 1]){
            foods += search_food(maps, visited, maps_len, x, y - 1);
        }
    }
    
    if(y < strlen(maps[x]) - 1){
        if(!visited[x][y + 1]){
            foods += search_food(maps, visited, maps_len, x, y + 1);
        }
    }
    
    return foods;
}


// maps_len은 배열 maps의 길이입니다.
// 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
int* solution(const char* maps[], size_t maps_len) {
    printf("%d\n", maps_len);
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    int** visited = (int**)malloc(sizeof(int*) * maps_len);
    for(int i = 0; i < maps_len; i++){
        visited[i] = (int*)malloc(sizeof(int) * strlen(maps[i]));
        for(int j = 0; j < strlen(maps[i]); j++){
            visited[i][j] = 0;
            if(maps[i][j] == 'X'){
                visited[i][j] = 1;
            }
        }
    }
    
    printf("d1\n");
    
    int islands = 0;
    for(int i = 0; i < maps_len; i++){
        for(int j = 0; j < strlen(maps[i]); j++){
            if(!visited[i][j]){
                search_food(maps, visited, maps_len, i, j);
                islands++;
            }
        }
    }
    
    printf("d2\n");
    
    for(int i = 0; i < maps_len; i++){
        for(int j = 0; j < strlen(maps[i]); j++){
            if(maps[i][j] == 'X'){
                visited[i][j] = 1;
            }
            else{
                visited[i][j] = 0;
            }
        }
    }
    
    printf("d3\n");
    
    int* answer;
    if(islands == 0){
        answer = (int*)malloc(sizeof(int));
        answer[0] = -1;
        return answer;
    }
    else{
        answer = (int*)malloc(sizeof(int) * islands);    
    }
    
    islands = 0;
    for(int i = 0; i < maps_len; i++){
        for(int j = 0; j < strlen(maps[i]); j++){
            if(!visited[i][j]){
                answer[islands] = search_food(maps, visited, maps_len, i, j);
                islands++;
            }
        }
    }
    
    qsort(answer, islands, sizeof(int), compare);
    
    return answer;
}
