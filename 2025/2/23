#include <stdio.h>
#include <stdlib.h>
#define SIZE 101

typedef struct Queue{
    int data[SIZE];
    int front, rear;
}Queue;

void init(Queue* Q){
    Q->front = 0;
    Q->rear = 0;
}

int isFull(Queue *Q){
    return Q->front == (Q->rear + 1) % SIZE;
}

int isEmpty(Queue *Q){
    return Q->front == Q->rear;
}

void enqueue(Queue *Q, int num){
    if(isFull(Q)){
        printf("cant enqueue\n");
        return;
    }
    Q->rear = (Q->rear + 1) % SIZE;
    Q->data[Q->rear] = num;
}

int dequeue(Queue *Q){
    if(isEmpty(Q)){
        printf("cant dequeue\n");
        return -1;
    }
    Q->front = (Q->front + 1) % SIZE;
    return Q->data[Q->front];
}

int exist_more_importance(Queue *Q){
    int idx = (Q->front + 1) % SIZE;
    int curr_importance = Q->data[idx];

    idx = (idx + 1) % SIZE;
    while(idx != (Q->rear + 1) % SIZE){
        if(Q->data[idx] > curr_importance){
            return 1;
        }
        idx = (idx + 1) % SIZE;
    }

    return 0;
}

int main(){
    int test_case;
    scanf("%d", &test_case);

    for(int i = 0; i < test_case; i++){
        int n, m;
        scanf("%d %d", &n, &m);

        Queue Q;
        init(&Q);
        for(int j = 0; j < n; j++){
            int val;
            scanf("%d", &val);
            enqueue(&Q, val);
        }

        int count = 0;
        while(1){
            if(!exist_more_importance(&Q)){
                if(m == 0){
                    dequeue(&Q);
                    count++;
                    break;
                }
                dequeue(&Q);
                count++;
                n--;
                m--;
            }
            else{
                if(m == 0){
                    m = n - 1;
                }
                else{
                    m--;
                }
                enqueue(&Q, dequeue(&Q));
            }
        }

        printf("%d\n", count);
    }

    return 0;
}
