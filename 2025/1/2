// 1. 재귀 호출 시 경계 조건 명확히 하기. 
// 2. compare의 경우 *a - *b는 overflow가 발생해서 제대로 비교 안 될 수 있으니 조건문 사용해서 return 하기.

#include <stdio.h>
#include <stdlib.h>

int compare(const void* a, const void* b){
    const int *int_a = (const int*)a;
    const int *int_b = (const int*)b;
    
    if(*int_a < *int_b) return -1;
    if(*int_a > *int_b) return 1;
    return 0;
}

int qsearch(int *arr, int start, int end, int data){
    if(start > end) return 0;

    int middle = (start + end)/2;

    int result = 0;
    if(arr[middle] == data){
        // printf("middle\n");
        return 1;
    }
    else if(arr[middle] > data){
        // printf(" %d left\n", arr[middle]);
        return qsearch(arr, start, middle - 1, data);
    }
    else{
        // printf(" %d right\n", arr[middle]);
        return qsearch(arr, middle + 1, end, data);
    }
}

int main(){
    int n = 0;
    scanf("%d", &n);

    int *arr_n = (int*)malloc(sizeof(int) * n);
    for(int i = 0; i < n; i++){
        scanf("%d", &arr_n[i]);
    }

    qsort(arr_n, n, sizeof(int), compare);

    int m = 0;
    scanf("%d", &m);

    int *arr_m = (int*)malloc(sizeof(int) * m);
    for(int i = 0; i < m; i++){
        scanf("%d", &arr_m[i]);
    }

    for(int i = 0; i < m; i++){
        printf("%d\n", qsearch(arr_n, 0, n - 1, arr_m[i]));
    }

    free(arr_n);
    free(arr_m);

    return 0;
}
